-- vim: ft=haskell
-- The ghci-specifc commands kind of breaks the syntax, though

:seti +m -- Allow multiline mode
:seti +t -- Show resulting type

-- $ stack install pretty-show
-- $ stack install hscolour

-- Colorizing ghci output
import           Text.Show.Pretty                    (ppShow)
import qualified Language.Haskell.HsColour           as HSC
import qualified Language.Haskell.HsColour.Colourise as HSC

:{
let myColourPrefs = HSC.defaultColourPrefs { HSC.conop    = [HSC.Foreground HSC.Yellow]
                                           , HSC.conid    = [HSC.Foreground HSC.Yellow, HSC.Bold]
                                           , HSC.string   = [HSC.Foreground $ HSC.Rgb 29 193 57]
                                           , HSC.char     = [HSC.Foreground HSC.Cyan]
                                           , HSC.number   = [HSC.Foreground $ HSC.Rgb 202 170 236]
                                           , HSC.keyglyph = [HSC.Foreground HSC.Yellow]
                                           }
:}

:{
ghciColorPrint :: Show a => a -> IO ()
ghciColorPrint = putStrLn . HSC.hscolour HSC.TTY myColourPrefs False False "" False . ppShow
:}

:{
showModules :: [String] -> String
showModules []          = ""
showModules [m]         = m
showModules (m1:m2:ms)  = m1 ++ " " ++ showModules (m2:ms)

showPrompt :: [String] -> Int -> IO String
showPrompt ms l = do
  let mods = [ m | m <- ms, m /= "HSC", m /= "Text.Show.Pretty" ]
  let pre  = "\ESC[38;5;245m" ++ show l ++ ": [ " ++ showModules mods ++ " ]"
  let pro  = "\ESC[38;5;61mÎ»> \ESC[m"
  return ("\n"++pre++"\n"++pro)
:}

:set prompt-function showPrompt
:set prompt-cont "\ESC[38;5;61m   \ESC[m"

:def pretty   \_ -> return (":set -interactive-print=ghciColorPrint")
:def nopretty \_ -> return (":set -interactive-print=System.IO.print")
:pretty

-- Adds hoogle command
:def hoogle \str -> return $ ":! hoogle --count=15 \"" ++ str ++ "\""
-- Find out the stack package that contains a module
:def package \m -> return $ ":! ghc-pkg --simple-output find-module " ++ m
-- Reload ghci.conf
:def rr \_ -> return ":script ~/.ghc/ghci.conf"
